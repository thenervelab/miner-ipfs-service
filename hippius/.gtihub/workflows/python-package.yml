```yaml
name: Python Package

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

jobs:
  format:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.3
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Install dependencies
      run: |
        poetry install --all-extras
    - name: Format with black
      run: |
        poetry run black .
    - name: Commit formatting changes
      if: github.event_name == 'push'
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        git add -A
        git diff --quiet && git diff --staged --quiet || (git commit -m "Apply Black formatting [skip ci]" && git push)

  test:
    needs: format
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.3
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Install dependencies
      run: |
        poetry install --all-extras
    - name: Check formatting with black
      run: |
        poetry run black --check .
    - name: Test with pytest
      run: |
        poetry run pytest --cov=hippius --cov-report=xml
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        fail_ci_if_error: false

  build-and-publish:
    name: Build and Publish to PyPI
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    permissions:
      contents: read
      id-token: write
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.3
        virtualenvs-create: true
        virtualenvs-in-project: true
    - name: Install dependencies
      run: |
        poetry install
    - name: Build package
      run: |
        poetry build
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
```